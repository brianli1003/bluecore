// <auto-generated />
using System;
using Blue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blue.Api.Migrations
{
    [DbContext(typeof(BlueDbContext))]
    partial class BlueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blue.Data.IdentityModel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = new Guid("5a61f008-0ce1-4b60-8c0c-c12c721e475d"), ConcurrencyStamp = "b949ec9d-54a2-41a8-90a9-eb04497a8de6", CreatedBy = "systemadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 30, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "admin", NormalizedName = "ADMIN", UpdatedBy = "systemadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 32, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("7a749297-4edf-4d16-a769-d3bada83247e"), ConcurrencyStamp = "1781ea63-23e9-44c2-b2ec-67ff041991e8", CreatedBy = "systemadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 32, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "customer", NormalizedName = "CUSTOMER", UpdatedBy = "systemadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 32, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("61f3dc6e-3863-40e5-ba2b-a6334b5590ac"), ConcurrencyStamp = "4417f3ca-34fb-4660-a8d7-1ddfd0e9cab4", CreatedBy = "systemadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 32, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "guest", NormalizedName = "GUEST", UpdatedBy = "systemadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 32, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("LastName");

                    b.Property<DateTimeOffset>("LockedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("RememberMe");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("ShouldLockout");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTimeOffset>("UnLockedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = new Guid("53319368-f467-4d49-a1b0-8da303b6c24a"), AccessFailedCount = 0, ConcurrencyStamp = "ba119b6c-6b66-46a0-9bff-ef81eaff91dd", CreatedBy = "systemadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 33, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), Email = "system@gmail.com", EmailConfirmed = false, FirstName = "System", IsDeleted = true, IsLocked = false, LastName = "Administrator", LockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), LockoutEnabled = false, NormalizedEmail = "SYSTEM@SIMPLCOMMERCE.COM", NormalizedUserName = "SYSTEMADMIN", PasswordHash = "AQAAAAEAACcQAAAAEFB+UXfZPfZvMWdDDl9SSWPNDoKKBpBASb/CzK/rmWu/OlE15ALyEAY/QKP4jEkRyg==", PhoneNumberConfirmed = false, RememberMe = false, SecurityStamp = "ef21d984-9ddd-40d3-8ad3-caf1cf7009bf", ShouldLockout = false, TwoFactorEnabled = false, UnLockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), UpdatedBy = "systemadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 33, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), UserName = "systemadmin" },
                        new { Id = new Guid("55e816d6-34e1-4a1c-9940-4bc5381b21b8"), AccessFailedCount = 0, ConcurrencyStamp = "9bd89126-8051-4401-87be-b7a5ae0daf43", CreatedBy = "systemadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 33, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), Email = "admin@gmail.com", EmailConfirmed = false, FirstName = "Shop", IsDeleted = false, IsLocked = false, LastName = "Admin", LockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), LockoutEnabled = false, NormalizedEmail = "ADMIN@GMAIL.COM", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEFB+UXfZPfZvMWdDDl9SSWPNDoKKBpBASb/CzK/rmWu/OlE15ALyEAY/QKP4jEkRyg==", PhoneNumberConfirmed = false, RememberMe = false, SecurityStamp = "8bfd037b-da79-4f77-a20b-2c7cdb276293", ShouldLockout = false, TwoFactorEnabled = false, UnLockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), UpdatedBy = "systemadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 6, 25, 18, 20, 26, 33, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserLogin", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey")
                        .IsRequired();

                    b.HasKey("UserId", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = new Guid("53319368-f467-4d49-a1b0-8da303b6c24a"), RoleId = new Guid("5a61f008-0ce1-4b60-8c0c-c12c721e475d") },
                        new { UserId = new Guid("55e816d6-34e1-4a1c-9940-4bc5381b21b8"), RoleId = new Guid("5a61f008-0ce1-4b60-8c0c-c12c721e475d") }
                    );
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Blue.Model.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AudittingLevel");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Data");

                    b.Property<int>("EventType");

                    b.Property<string>("ExternalIpAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SessionId");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UrlAccessed");

                    b.Property<int>("UserAction");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Blue.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name");

                    b.Property<long?>("ParentId");

                    b.Property<Guid?>("ParentId1");

                    b.Property<string>("SeoTitle");

                    b.Property<Guid?>("ThumbnailImageId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ParentId1");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Blue.Model.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("Fax");

                    b.Property<string>("Google");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Lat");

                    b.Property<string>("Lng");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Pinterest");

                    b.Property<string>("Twitter");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Blue.Model.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Blue.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal>("Price");

                    b.Property<string>("Sku");

                    b.Property<int?>("SockQuanity");

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTime?>("SpecialPriceEnd");

                    b.Property<DateTime?>("SpecialPriceStart");

                    b.Property<Guid?>("ThumbnailImageId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Blue.Model.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<Guid?>("CategoryId1");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<long>("ProductId");

                    b.Property<Guid?>("ProductId1");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Blue.Model.ProductMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MediaId");

                    b.Property<Guid?>("MediaId1");

                    b.Property<long>("ProductId");

                    b.Property<Guid?>("ProductId1");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MediaId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.RoleClaim", b =>
                {
                    b.HasOne("Blue.Data.IdentityModel.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserClaim", b =>
                {
                    b.HasOne("Blue.Data.IdentityModel.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserLogin", b =>
                {
                    b.HasOne("Blue.Data.IdentityModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserRole", b =>
                {
                    b.HasOne("Blue.Data.IdentityModel.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blue.Data.IdentityModel.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.IdentityModel.UserToken", b =>
                {
                    b.HasOne("Blue.Data.IdentityModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Model.Category", b =>
                {
                    b.HasOne("Blue.Model.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId1");

                    b.HasOne("Blue.Model.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");
                });

            modelBuilder.Entity("Blue.Model.Product", b =>
                {
                    b.HasOne("Blue.Model.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");
                });

            modelBuilder.Entity("Blue.Model.ProductCategory", b =>
                {
                    b.HasOne("Blue.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId1");

                    b.HasOne("Blue.Model.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("Blue.Model.ProductMedia", b =>
                {
                    b.HasOne("Blue.Model.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId1");

                    b.HasOne("Blue.Model.Product", "Product")
                        .WithMany("Medias")
                        .HasForeignKey("ProductId1");
                });
#pragma warning restore 612, 618
        }
    }
}
